// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cosplines.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// spearman_rank
double spearman_rank(arma::mat& x);
static SEXP _cosplines_spearman_rank_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_rank(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cosplines_spearman_rank(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cosplines_spearman_rank_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// quantile_dependence
double quantile_dependence(arma::mat& x, double q);
static SEXP _cosplines_quantile_dependence_try(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_dependence(x, q));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cosplines_quantile_dependence(SEXP xSEXP, SEXP qSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cosplines_quantile_dependence_try(xSEXP, qSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// vec_moments
arma::vec vec_moments(arma::mat& x, arma::vec& q);
static SEXP _cosplines_vec_moments_try(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_moments(x, q));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cosplines_vec_moments(SEXP xSEXP, SEXP qSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cosplines_vec_moments_try(xSEXP, qSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// average_moments
arma::vec average_moments(arma::mat& x, arma::vec& q);
static SEXP _cosplines_average_moments_try(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(average_moments(x, q));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cosplines_average_moments(SEXP xSEXP, SEXP qSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cosplines_average_moments_try(xSEXP, qSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// clayton
arma::mat clayton(arma::vec& z, arma::mat& eps, double alpha);
static SEXP _cosplines_clayton_try(SEXP zSEXP, SEXP epsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(clayton(z, eps, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cosplines_clayton(SEXP zSEXP, SEXP epsSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cosplines_clayton_try(zSEXP, epsSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// splines_new_obs
arma::vec splines_new_obs(arma::vec& coefs, arma::mat& B1, arma::mat& B2);
static SEXP _cosplines_splines_new_obs_try(SEXP coefsSEXP, SEXP B1SEXP, SEXP B2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B2(B2SEXP);
    rcpp_result_gen = Rcpp::wrap(splines_new_obs(coefs, B1, B2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cosplines_splines_new_obs(SEXP coefsSEXP, SEXP B1SEXP, SEXP B2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cosplines_splines_new_obs_try(coefsSEXP, B1SEXP, B2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _cosplines_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*spearman_rank)(arma::mat&)");
        signatures.insert("double(*quantile_dependence)(arma::mat&,double)");
        signatures.insert("arma::vec(*vec_moments)(arma::mat&,arma::vec&)");
        signatures.insert("arma::vec(*average_moments)(arma::mat&,arma::vec&)");
        signatures.insert("arma::mat(*clayton)(arma::vec&,arma::mat&,double)");
        signatures.insert("arma::vec(*splines_new_obs)(arma::vec&,arma::mat&,arma::mat&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _cosplines_RcppExport_registerCCallable() { 
    R_RegisterCCallable("cosplines", "_cosplines_spearman_rank", (DL_FUNC)_cosplines_spearman_rank_try);
    R_RegisterCCallable("cosplines", "_cosplines_quantile_dependence", (DL_FUNC)_cosplines_quantile_dependence_try);
    R_RegisterCCallable("cosplines", "_cosplines_vec_moments", (DL_FUNC)_cosplines_vec_moments_try);
    R_RegisterCCallable("cosplines", "_cosplines_average_moments", (DL_FUNC)_cosplines_average_moments_try);
    R_RegisterCCallable("cosplines", "_cosplines_clayton", (DL_FUNC)_cosplines_clayton_try);
    R_RegisterCCallable("cosplines", "_cosplines_splines_new_obs", (DL_FUNC)_cosplines_splines_new_obs_try);
    R_RegisterCCallable("cosplines", "_cosplines_RcppExport_validate", (DL_FUNC)_cosplines_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_cosplines_spearman_rank", (DL_FUNC) &_cosplines_spearman_rank, 1},
    {"_cosplines_quantile_dependence", (DL_FUNC) &_cosplines_quantile_dependence, 2},
    {"_cosplines_vec_moments", (DL_FUNC) &_cosplines_vec_moments, 2},
    {"_cosplines_average_moments", (DL_FUNC) &_cosplines_average_moments, 2},
    {"_cosplines_clayton", (DL_FUNC) &_cosplines_clayton, 3},
    {"_cosplines_splines_new_obs", (DL_FUNC) &_cosplines_splines_new_obs, 3},
    {"_cosplines_RcppExport_registerCCallable", (DL_FUNC) &_cosplines_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_cosplines(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
