// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_cosplines_RCPPEXPORTS_H_GEN_
#define RCPP_cosplines_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace cosplines {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("cosplines", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("cosplines", "_cosplines_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in cosplines");
            }
        }
    }

    inline double spearman_rank(arma::mat& x) {
        typedef SEXP(*Ptr_spearman_rank)(SEXP);
        static Ptr_spearman_rank p_spearman_rank = NULL;
        if (p_spearman_rank == NULL) {
            validateSignature("double(*spearman_rank)(arma::mat&)");
            p_spearman_rank = (Ptr_spearman_rank)R_GetCCallable("cosplines", "_cosplines_spearman_rank");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_spearman_rank(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double quantile_dependence(arma::mat& x, double q) {
        typedef SEXP(*Ptr_quantile_dependence)(SEXP,SEXP);
        static Ptr_quantile_dependence p_quantile_dependence = NULL;
        if (p_quantile_dependence == NULL) {
            validateSignature("double(*quantile_dependence)(arma::mat&,double)");
            p_quantile_dependence = (Ptr_quantile_dependence)R_GetCCallable("cosplines", "_cosplines_quantile_dependence");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_quantile_dependence(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(q)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::vec vec_moments(arma::mat& x, arma::vec& q) {
        typedef SEXP(*Ptr_vec_moments)(SEXP,SEXP);
        static Ptr_vec_moments p_vec_moments = NULL;
        if (p_vec_moments == NULL) {
            validateSignature("arma::vec(*vec_moments)(arma::mat&,arma::vec&)");
            p_vec_moments = (Ptr_vec_moments)R_GetCCallable("cosplines", "_cosplines_vec_moments");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_vec_moments(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(q)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec average_moments(arma::mat& x, arma::vec& q) {
        typedef SEXP(*Ptr_average_moments)(SEXP,SEXP);
        static Ptr_average_moments p_average_moments = NULL;
        if (p_average_moments == NULL) {
            validateSignature("arma::vec(*average_moments)(arma::mat&,arma::vec&)");
            p_average_moments = (Ptr_average_moments)R_GetCCallable("cosplines", "_cosplines_average_moments");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_average_moments(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(q)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat clayton(arma::vec& z, arma::mat& eps, double alpha) {
        typedef SEXP(*Ptr_clayton)(SEXP,SEXP,SEXP);
        static Ptr_clayton p_clayton = NULL;
        if (p_clayton == NULL) {
            validateSignature("arma::mat(*clayton)(arma::vec&,arma::mat&,double)");
            p_clayton = (Ptr_clayton)R_GetCCallable("cosplines", "_cosplines_clayton");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_clayton(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec splines_new_obs(arma::vec& coefs, arma::mat& B1, arma::mat& B2) {
        typedef SEXP(*Ptr_splines_new_obs)(SEXP,SEXP,SEXP);
        static Ptr_splines_new_obs p_splines_new_obs = NULL;
        if (p_splines_new_obs == NULL) {
            validateSignature("arma::vec(*splines_new_obs)(arma::vec&,arma::mat&,arma::mat&)");
            p_splines_new_obs = (Ptr_splines_new_obs)R_GetCCallable("cosplines", "_cosplines_splines_new_obs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_splines_new_obs(Shield<SEXP>(Rcpp::wrap(coefs)), Shield<SEXP>(Rcpp::wrap(B1)), Shield<SEXP>(Rcpp::wrap(B2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

}

#endif // RCPP_cosplines_RCPPEXPORTS_H_GEN_
